import MaintenanceBanner from "@/components/MaintenanceBanner";
import OutageBanner from "@/components/OutageBanner";
import ServiceGroupContainer from "@/components/ServiceGroupContainer";
import ServiceStatus from "@/components/ServiceStatus";
import { Metadata } from "next";
import Heading from "@/components/ui/heading";
import { pad_array } from "@/lib/utils";
import { ServiceGroup, Service } from "@/lib/StatusAPI";
import { PrismaClient, BannerItem } from "@prisma/client";
// import { getServices } from "@/lib/StatusAPI";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const client = new PrismaClient();

async function getServices() {
  const serviceGroups = await client.serviceGroup.findMany({
    include: {
      services: {
        include: {
          uptimeEntries: true,
        },
      },
    },
  });

  return serviceGroups;
}

async function getBanner() {
  const currentTime = new Date();

  const activeBannerItems = await client.bannerItem.findMany({
    where: {
      startTime: { lte: currentTime },
      endTime: { gte: currentTime },
    },
  });

  return activeBannerItems;
}

const Home = async () => {
  try {
    const statusData: ServiceGroup[] = await getServices();
    const banner: BannerItem[] = await getBanner();
    console.log(statusData);

    return (
      <div className="w-content rounded-xl flex flex-col items-center gap-4 py-8">
        {banner.length > 0 ? (
          banner[0].type == "MAINTENANCE" ? (
            <MaintenanceBanner
              key={banner[0].title}
              title={banner[0].title}
              body={banner[0].description}
              startTime={banner[0].startTime}
              endTime={banner[0].endTime}
            />
          ) : (
            <OutageBanner
              key={banner[0].title}
              title={banner[0].title}
              body={banner[0].description}
              startTime={banner[0].startTime}
              endTime={banner[0].endTime}
            />
          )
        ) : (
          <></>
        )}
        <br />
        <br />
        <Heading>Service Groups</Heading>
        {statusData.length > 0 ? (
          statusData.map((item) => (
            <>
              <ServiceGroupContainer title={item.name}>
                {item.services.map((item: Service) => (
                  <ServiceStatus
                    key={item.name}
                    service={item.name}
                    status={
                      item.uptimeEntries.length == 0
                        ? "unknown"
                        : item.uptimeEntries[item.uptimeEntries.length - 1]
                              .state == true
                          ? "operational"
                          : "degraded"
                    }
                    history={pad_array(
                      item.uptimeEntries.map((entry) =>
                        entry.state ? "operational" : "degraded",
                      ),
                      90,
                      "unknown",
                    )}
                  />
                ))}
              </ServiceGroupContainer>
            </>
          ))
        ) : (
          <></>
        )}
      </div>
    );
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
  } catch (error: any) {
    // Return JSX directly based on the error type
    if (error instanceof AggregateError) {
      return <div className="error-message">An AggregateError occurred.</div>;
    } else if (error instanceof Error) {
      if ("code" in error) {
        return (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          <div className="error-message">Error code: {(error as any).code}</div>
        );
      } else {
        return <div className="error-message">{`Error: ${error.message}`}</div>;
      }
    } else {
      return <div className="error-message">Unexpected error occurred.</div>;
    }
  }
};

export default Home;
